# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v3
       - name: build and test
         run: |
           cd demo-app
           export ENVIRONMENT=development
           export DJANGO_SECRET_KEY='django-insecure-dummy-key'
           export DEBUG=True
           export DATABASE_NAME='db.sqlite3'
           pip install --no-cache-dir -r requirements.txt
           python manage.py migrate
           if [ "$ENVIRONMENT" = "production" ] ; then 
            gunicorn demo.wsgi:application --bind 0.0.0.0:8000 &
           else 
            nohup python manage.py runserver 0.0.0.0:8000 &
           fi
           # test the server
            # curl command to generate a random user dni and name in the database; example curl -X POST -H "Content-Type: application/json" -d '{"dni":"your_dni", "name":"your_name"}' http://localhost:8000/api/users/
            # 1. Generate a random dni
            dni=$(cat /dev/urandom | tr -dc '0-9' | fold -w 8 | head -n 1)
            # 2. Generate a random name
            name=$(cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 8 | head -n 1)
            # 3. Insert the random dni and name in the database
            insert=$(curl -sX POST -H "Content-Type: application/json" -d '{"dni":"'$dni'", "name":"'$name'"}' http://localhost:8000/api/users/)
            # get all users
            get=$(curl -sX GET http://localhost:8000/api/users/)
            # parse the users to find the user with the random dni and name
            user=$(echo $get | jq '.[] | select(.dni == "'$dni'") | select(.name == "'$name'")')
            # if the user is found, the test is successful
            if [ -n "$user" ]; then
              echo "Test passed"
              echo "dni: $dni"
                echo "name: $name"
                echo "user: $user"
            else
              echo "Test failed"
              exit 1
            fi
      # docker build and push
       - name: Docker Build and Push
         run: |
            export ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            export DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker build -t ${{ secrets.DOCKER_USERNAME }}/demo-app .
            docker push ${{ secrets.DOCKER_USERNAME }}/demo-app
      # build aks through terrafaorm
       - name: Terraform Init
         run: |
           cd infra
           terraform init
       - name: Terraform Plan
         run: |
           cd infra
           terraform plan
       - name: Terraform Apply
         run: |
           cd infra
           terraform apply -auto-approve
      # fetch aks credentials
       - name: AKS Get Credentials
         run: |
           az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
      # deploy to aks using helm
        - name: Helm Install
          run: |
            cd infra
            helm install demo-app ./demo-app-chart
